package main

import (
	"bufio"
	"fmt"
	"guitar_processor/internal/effect"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/gordonklaus/portaudio"
)

func main() {
	must(portaudio.Initialize())
	defer portaudio.Terminate()

	devices, err := portaudio.Devices()
	must(err)

	// üéôÔ∏è –ö—Ä–æ–∫ 1: –æ–±–∏—Ä–∞—î–º–æ –≤—Ö—ñ–¥
	fmt.Println("üîç –°–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏:")
	for i, dev := range devices {
		if dev.MaxInputChannels > 0 {
			fmt.Printf("[%d] %s [driver: %s]\n", i, dev.Name, dev.HostApi.Name)
		}
	}
	fmt.Print("üü¢ –í–≤–µ–¥—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é: ")
	inputDev := devices[24]

	// üéß –ö—Ä–æ–∫ 2: –æ–±–∏—Ä–∞—î–º–æ –≤–∏—Ö—ñ–¥
	fmt.Println("\nüéß –î–æ—Å—Ç—É–ø–Ω—ñ –í–ò–•–Ü–î–ù–Ü –ø—Ä–∏—Å—Ç—Ä–æ—ó:")
	for i, dev := range devices {
		if dev.MaxOutputChannels > 0 {
			fmt.Printf("[%d] %s [driver: %s]\n", i, dev.Name, dev.HostApi.Name)
		}
	}
	fmt.Print("üîµ –í–≤–µ–¥—ñ—Ç—å —ñ–Ω–¥–µ–∫—Å –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é: ")
	outputDev := devices[19]

	// ‚ñ∂Ô∏è –ö—Ä–æ–∫ 3: –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫
	fmt.Printf("\n‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç: %s ‚Üí %s\n", inputDev.Name, outputDev.Name)
	stream := mustCreateStream(inputDev, outputDev)
	defer stream.Close()
	must(stream.Start())

	fmt.Println("üîä –ü–æ—Ç—ñ–∫ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ Ctrl+C –¥–ª—è –≤–∏—Ö–æ–¥—É.")
	select {}
}

func mustCreateStream(input, output *portaudio.DeviceInfo) *portaudio.Stream {
	const sampleRate = 44100
	const bufferSize = 256
	fmt.Println("–í—Ö—ñ–¥ –º–∞—î —Å–µ–º–ø–ª—Ä–µ–π—Ç:", input.DefaultSampleRate)
	fmt.Println("–í–∏—Ö—ñ–¥ —Å–µ–º–ø–ª—Ä–µ–π—Ç:", output.DefaultSampleRate)
	//reverb := effect.NewReverb(sampleRate, 200.0, 0.3) // 80 –º—Å –∑–∞—Ç—Ä–∏–º–∫–∞, 40% decay

	stream, err := portaudio.OpenStream(portaudio.StreamParameters{
		Input: portaudio.StreamDeviceParameters{
			Device:   input,
			Channels: input.MaxInputChannels,
			Latency:  input.DefaultHighInputLatency,
		},
		Output: portaudio.StreamDeviceParameters{
			Device:   output,
			Channels: output.MaxOutputChannels,
			Latency:  output.DefaultHighInputLatency,
		},
		SampleRate:      sampleRate,
		FramesPerBuffer: bufferSize,
	}, func(in, out []float32) {
		frames := len(in) / 2
		buffer := make([]float32, frames)

		for i := 0; i < frames; i++ {
			buffer[i] = in[i*2] // –ª–∏—à–µ –ø—Ä–∞–≤–∏–π –≤—Ö—ñ–¥
		}
		ds := &effect.BossDistortion{
			Gain:     8.0,
			Level:    0.9,
			HardClip: true, // –∞–±–æ true –¥–ª—è square-style
		}
		ds.Process(buffer)

		//reverb.Process(buffer)
		for i := 0; i < frames; i++ {
			s := buffer[i]
			out[i*4] = s   // –ª—ñ–≤–∏–π
			out[i*4+1] = s // –ø—Ä–∞–≤–∏–π
			out[i*4+2] = 0 // mute
			out[i*4+3] = 0
		}

	},
	)
	must(err)
	return stream
}

func must(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func readInt() int {
	reader := bufio.NewReader(os.Stdin)
	for {
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		idx, err := strconv.Atoi(input)
		if err == nil {
			return idx
		}
		fmt.Print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ: ")
	}
}

func clamp(x float32) float32 {
	if x > 1 {
		return 1
	}
	if x < -1 {
		return -1
	}
	return x
}
